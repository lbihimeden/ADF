{
	"name": "df_numeris_ds_ablb_numeris_weekly_daypart_to_ds_asql_numeris",
	"properties": {
		"folder": {
			"name": "00 - Projects/02 - Numeris/daypart"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_adls_numeris",
						"type": "LinkedServiceReference"
					},
					"name": "Daypart"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_asql_numeris",
						"type": "DatasetReference"
					},
					"name": "sinkWeeklyDaypart"
				}
			],
			"transformations": [
				{
					"name": "flattenDaypart"
				},
				{
					"name": "changeDataType"
				}
			],
			"scriptLines": [
				"parameters{",
				"     param_daypart_json as string",
				"}",
				"source(output(",
				"          ExpiryTime as string,",
				"          Responses as (Alerts as string[], AudienceInformation as (Label as string, MetricsPerMarket as (Sample as long, Universe as double)[], OverlapsPrevious as boolean, OverlapsPrimary as boolean, SubsetOfPrevious as boolean, SubsetOfPrimary as boolean)[], DateRanges as (EndDate as string, NonCurrencySurvey as boolean, StartDate as string)[], ErrorCode as string, LastConfirmedDate as string, Markets as (Id as long, IsUserSelectable as boolean, Name as string)[], Messages as string[], Platforms as string, Results as (DaypartLabel as string, StationCode as long, StationCodes as long[], StationName as string, StationNames as string[], StatsPerAudience as (PerActivityType as string[], PerMarket as (SecondsTunedPerWeek as double, WeeklyReach as double, WeeklyReachPercent as double)[], PerPlatform as string)[], Weekdays as string)[], Status as string)[]",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     purgeFiles: true,",
				"     format: 'json',",
				"     fileSystem: 'bi-revolution',",
				"     folderPath: 'staging/numeris/adf_json',",
				"     fileName: ($param_daypart_json),",
				"     documentForm: 'documentPerLine') ~> Daypart",
				"Daypart foldDown(unrollMultiple(Responses.AudienceInformation,Responses.Results,Responses.Markets,Responses.DateRanges,Responses.Results.StatsPerAudience.PerMarket),",
				"     mapColumn(",
				"          StartDate = Responses.DateRanges.StartDate,",
				"          EndDate = Responses.DateRanges.EndDate,",
				"          MarketId = Responses.Markets.Id,",
				"          MarketName = Responses.Markets.Name,",
				"          Label = Responses.AudienceInformation.Label,",
				"          StationName = Responses.Results.StationName,",
				"          StationCode = Responses.Results.StationCode,",
				"          Weekdays = Responses.Results.Weekdays,",
				"          DaypartLabel = Responses.Results.DaypartLabel,",
				"          WeeklyReach = Responses.Results.StatsPerAudience.PerMarket.WeeklyReach,",
				"          WeeklyReachPercent = Responses.Results.StatsPerAudience.PerMarket.WeeklyReachPercent,",
				"          SecondsTunedPerWeek = Responses.Results.StatsPerAudience.PerMarket.SecondsTunedPerWeek",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenDaypart",
				"flattenDaypart cast(output(",
				"          MarketId as string,",
				"          StationCode as string,",
				"          WeeklyReach as string,",
				"          WeeklyReachPercent as string,",
				"          SecondsTunedPerWeek as string",
				"     ),",
				"     errors: true) ~> changeDataType",
				"changeDataType sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkWeeklyDaypart"
			]
		}
	}
}